function concurrentTasks(tasks, limit) {
    let index = 0;
    let results = [];
    let active = 0;

    return new Promise((resolve, reject) => {
        function next() {
            if (index === tasks.length && active === 0) {
                resolve(results);
                return;
            }
            while (active < limit && index < tasks.length) {
                active++;
                let i = index;
                tasks[i]()
                    .then((res) => {
                        results[i] = res;
                    })
                    .catch(reject)
                    .finally(() => {
                        active--;
                        next();
                    });
                index++;
            }
        }
        next();
    });
}

// Usage
const tasks = [
    () => new Promise((res) => setTimeout(() => res("Task 1"), 1000)),
    () => new Promise((res) => setTimeout(() => res("Task 2"), 500)),
    () => new Promise((res) => setTimeout(() => res("Task 3"), 2000)),
];

concurrentTasks(tasks, 2).then(console.log);
