import time
import hashlib
import json

class Block:
    def __init__(self, index, transactions, timestamp, previous_hash, nonce=0):
        self.index = index
        self.transactions = transactions
        self.timestamp = timestamp
        self.previous_hash = previous_hash
        self.nonce = nonce
        self.hash = self.compute_hash()

    def compute_hash(self):
        """
        计算区块哈希
        """
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

class Blockchain:
    difficulty = 2

    def __init__(self):
        self.unconfirmed_transactions = []  # 未确认的交易
        self.chain = []
        self.create_genesis_block()

    def create_genesis_block(self):
        """
        创建创世区块
        """
        genesis_block = Block(0, [], time.time(), "0")
        self.chain.append(genesis_block)

    def add_new_transaction(self, transaction):
        """
        添加新交易到交易池
        """
        self.unconfirmed_transactions.append(transaction)

    def proof_of_work(self, block):
        """
        挖矿：寻找符合难度要求的哈希
        """
        block.nonce = 0
        computed_hash = block.compute_hash()
        while not computed_hash.startswith('0' * Blockchain.difficulty):
            block.nonce += 1
            computed_hash = block.compute_hash()
        return computed_hash

    def mine(self):
        """
        挖矿：生成新区块并添加到区块链中
        """
        if not self.unconfirmed_transactions:
            return False
        last_block = self.chain[-1]
        new_block = Block(index=last_block.index+1,
                          transactions=self.unconfirmed_transactions,
                          timestamp=time.time(),
                          previous_hash=last_block.hash)
        proof = self.proof_of_work(new_block)
        new_block.hash = proof
        self.chain.append(new_block)
        self.unconfirmed_transactions = []
        return new_block.index

# 使用示例
if __name__ == "__main__":
    blockchain = Blockchain()
    blockchain.add_new_transaction({"from": "Alice", "to": "Bob", "amount": 10})
    mined_index = blockchain.mine()
    print("新块的索引:", mined_index)
