#include <iostream>
#include <vector>
#include <functional>

template<typename T>
void merge(std::vector<T>& arr, int left, int mid, int right, std::function<bool(const T&, const T&)> comp) {
    std::vector<T> temp;
    int i = left, j = mid + 1;
    while (i <= mid && j <= right) {
        if (comp(arr[i], arr[j]))
            temp.push_back(arr[i++]);
        else
            temp.push_back(arr[j++]);
    }
    while (i <= mid) temp.push_back(arr[i++]);
    while (j <= right) temp.push_back(arr[j++]);
    for (int k = left; k <= right; ++k)
        arr[k] = temp[k - left];
}

template<typename T>
void mergeSort(std::vector<T>& arr, int left, int right, std::function<bool(const T&, const T&)> comp) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid, comp);
        mergeSort(arr, mid + 1, right, comp);
        merge(arr, left, mid, right, comp);
    }
}

int main() {
    std::vector<int> data = {5, 3, 8, 6, 2, 7, 4, 1};
    mergeSort(data, 0, data.size() - 1, [](const int& a, const int& b) { return a < b; });
    for (auto num : data)
        std::cout << num << " ";
    std::cout << std::endl;
    return 0;
}
